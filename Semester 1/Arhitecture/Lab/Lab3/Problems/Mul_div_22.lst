     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 01                          a db 1
    15 00000001 02                          b db 2
    16 00000002 03                          c db 3
    17 00000003 04000000                    e dd 4
    18 00000007 0500000000000000            x dq 5
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 A0[00000000]                    mov al, [a]
    24 00000005 6698                            cbw ;ax = a
    25 00000007 B302                            mov bl, 2
    26 00000009 F6FB                            idiv bl ;al = a/2, ah = a % 2
    27 0000000B 6698                            cbw ; ax = a/2
    28 0000000D 6650                            push ax ;stack = ax
    29                                          
    30                                          
    31 0000000F A0[01000000]                    mov al, [b]
    32 00000014 F6E8                            imul al; ax = b * b
    33 00000016 6650                            push ax; stack = ax, ax = b*b, a/2
    34                                          
    35 00000018 A0[00000000]                    mov al, [a]
    36 0000001D 8A1D[01000000]                  mov bl, [b]
    37 00000023 F6EB                            imul bl ;ax = a * b
    38 00000025 6689C3                          mov bx, ax ;bx = a * b
    39                                          
    40 00000028 A0[02000000]                    mov al, [c]
    41 0000002D 6698                            cbw ;ax = c
    42 0000002F 66F7EB                          imul bx ;dx:ax = ax * bx = a * b * c
    43                                          
    44 00000032 6652                            push dx
    45 00000034 6650                            push ax ; stack = ax,dx, ax, ax =  a * b * c, b*b, a/2
    46 00000036 5B                              pop ebx ; ebx = a * b * c ; stack = ax, ax = b * b, a/2
    47                                          
    48 00000037 6658                            pop ax ; ax = b * b ; stack = ax = a/2
    49 00000039 98                              cwde ;eax = b * b
    50 0000003A 01C3                            add ebx, eax ; ebx = a * b * c + b * b
    51                                          
    52 0000003C 6658                            pop ax; stack empty
    53 0000003E 98                              cwde ; eax = a / 2
    54 0000003F 01C3                            add ebx, eax ; ebx = a * b * c + b * b + a / 2
    55                                          
    56 00000041 A1[03000000]                    mov eax, [e]
    57 00000046 99                              cdq; edx:eax = e
    58                                          
    59 00000047 F8                              clc
    60 00000048 0305[07000000]                  add eax, dword [x+0]
    61 0000004E 1315[0B000000]                  adc edx, dword [x+4] ; edx:eax = e + x
    62 00000054 52                              push edx
    63 00000055 50                              push eax ;stack = eax, edx = e+x
    64                                          
    65 00000056 89D8                            mov eax, ebx 
    66 00000058 99                              cdq ;edx:eax = a * b * c + b * b + a / 2
    67 00000059 5B                              pop ebx
    68 0000005A 59                              pop ecx ; ecx:ebx = e + x
    69                                          
    70 0000005B F8                              clc
    71 0000005C 01D8                            add eax, ebx
    72 0000005E 11CA                            adc edx, ecx ;a * b * c + b * b + a / 2 + e + x
    73                                          
    74                                          
    75                                          ; exit(0)
    76 00000060 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    77 00000062 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
