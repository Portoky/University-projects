     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 01                          a db 1
    15 00000001 0200                        b dw 2
    16 00000003 03000000                    c dd 3
    17 00000007 0400000000000000            d dq 4
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22 00000000 A1[07000000]                    mov EAX, dword [d+0]
    23 00000005 8B15[0B000000]                  mov EDX, dword [d+4] ; EDX:EAX = d
    24 0000000B 8B1D[03000000]                  mov EBX, [c] 
    25 00000011 B900000000                      mov ECX, 0; ECX:EBX = c
    26                                          
    27 00000016 F8                              clc
    28 00000017 01D8                            add EAX, EBX
    29 00000019 11CA                            adc EDX, ECX ;EDX:EAX = d+c
    30                                          
    31 0000001B BB00000000                      mov EBX, 0
    32 00000020 8B1D[03000000]                  mov EBX, [c]
    33 00000026 B900000000                      mov ECX, 0
    34 0000002B 668B0D[01000000]                mov CX, [b]
    35 00000032 01CB                            add EBX, ECX
    36 00000034 B900000000                      mov ECX, 0 ;ECX:EBX = c + b
    37                                                  
    38 00000039 F8                              clc
    39 0000003A 29D8                            sub EAX, EBX 
    40 0000003C 19CA                            sbb EDX, ECX ; EDX;EAX = (d+c) - (c+b)
    41                                          
    42                                          ;clearing ECX:EBX
    43 0000003E BB00000000                      mov EBX, 0
    44 00000043 B900000000                      mov ECX, 0
    45                                          
    46 00000048 668B1D[01000000]                mov BX, [b]
    47 0000004F 021D[00000000]                  add BL, [a] ;ECX:EBX = b + a
    48                                          
    49 00000055 F8                              clc
    50 00000056 29D8                            sub EAX, EBX
    51 00000058 19CA                            sbb EDX, ECX ; EDX;EAX = (d+c) - (c+b) - (b+a)
    52                                     
    53                                          ; exit(0)
    54 0000005A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 0000005C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
