     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 01                          a db 1 ;11
    15 00000001 0200                        b dw 2 ;1122
    16 00000003 03000000                    c dd 3 ;11223344
    17 00000007 0400000000000000            d dq 4 ;1122334455667788h
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22                                          ;mov ebx, [c]
    23                                          ;add ebx, [c]
    24                                          ;add ebx, [c]; ebx = c+c+c
    25                                          
    26 00000000 8B1D[07000000]                  mov ebx, dword[d+0]
    27 00000006 8B0D[0B000000]                  mov ecx, dword[d+4] ;ecx:ebx = d
    28                                          
    29 0000000C A0[00000000]                    mov al, [a]
    30 00000011 6698                            cbw
    31 00000013 98                              cwde ;eax = a
    32 00000014 99                              cdq; edx:eax = a
    33                                          
    34 00000015 F8                              clc
    35 00000016 29C3                            sub ebx, eax
    36 00000018 19D1                            sbb ecx, edx ; ecx:ebx = d - a 
    37                                          
    38 0000001A A1[03000000]                    mov eax, [c]
    39 0000001F 0305[03000000]                  add eax, [c]
    40 00000025 0305[03000000]                  add eax, [c] ;eax = c+c+c
    41 0000002B 99                              cdq; edx:eax = c+c+c
    42                                          
    43 0000002C F8                              clc;
    44 0000002D 01C3                            add ebx, eax
    45 0000002F 11D1                            adc ecx, edx ; ecx:ebx = (c+c+c) + (d-a)
    46                                          
    47 00000031 66A1[01000000]                  mov ax, [b]
    48 00000037 98                              cwde
    49 00000038 99                              cdq ; edx:eax = b
    50                                          
    51 00000039 F8                              clc
    52 0000003A 29C3                            sub ebx, eax
    53 0000003C 19D1                            sbb ecx, edx ; ecx:ebx = (c+c+c)-b +(d-a)
    54                                          
    55                                          
    56                                          
    57                                          ; exit(0)
    58 0000003E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    59 00000040 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
