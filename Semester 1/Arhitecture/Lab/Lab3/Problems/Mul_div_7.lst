     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 01                          a db 1
    15 00000001 02                          b db 2
    16 00000002 0300                        c dw 3
    17 00000004 04000000                    e dd 4
    18 00000008 0500000000000000            x dq 5
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 A0[00000000]                    mov al, [a]
    24 00000005 2C02                            sub al , 2
    25 00000007 6698                            cbw
    26 00000009 6699                            cwd; dx:ax = a - 2
    27                                          
    28                                          ;? mov eax, 0;
    29                                          ;mov al, [a]; positive
    30                                          
    31                                          ;?mov al, [a]; negative
    32                                          ;cbw
    33                                          ;cwde
    34                                          
    35 0000000B 6650                            push ax
    36 0000000D 6652                            push dx ;stack = dx, ax
    37 0000000F A0[01000000]                    mov al, [b]
    38 00000014 6698                            cbw
    39 00000016 660305[02000000]                add ax, [c] ;ax = b+c
    40 0000001D 6689C3                          mov bx, ax ;bx = b+c
    41 00000020 665A                            pop dx
    42 00000022 6658                            pop ax ; dx:ax = a-2
    43 00000024 66F7FB                          idiv bx ;ax = (a-2) / (b+c), dx = (a-2) % (b+c)
    44                                          
    45 00000027 6689C3                          mov bx, ax
    46 0000002A 6689D1                          mov cx, dx ;bx = (a-2) / (b+c), cx = (a-2) % (b+c)
    47 0000002D 6651                            push cx
    48 0000002F 6653                            push bx ;stack = bx, cx
    49 00000031 A0[00000000]                    mov al, [a]
    50 00000036 6698                            cbw ;ax = a
    51 00000038 66F72D[02000000]                imul word [c] ; DX:AX = a * c
    52 0000003F 6652                            push dx
    53 00000041 6650                            push ax ;stack = ax, dx, bx, cx
    54                                          
    55 00000043 A1[04000000]                    mov eax, [e]
    56 00000048 99                              cdq ;edx:eax = e
    57                                          
    58 00000049 F8                              clc
    59 0000004A 2B05[08000000]                  sub eax, dword [x+0]
    60 00000050 1B15[0C000000]                  sbb edx, dword [x+4] ;edx: eax = e - x
    61 00000056 89C3                            mov ebx, eax
    62 00000058 89D1                            mov ecx, edx ;ecx : ebx = e - x 
    63                                          
    64 0000005A 58                              pop eax; eax = dx:ax = a*c it loads it like that
    65                                                  ;stack bx, cx
    66 0000005B 99                              cdq ;edx:eax = a*c
    67                                          
    68 0000005C F8                              clc
    69 0000005D 01C3                            add ebx, eax
    70 0000005F 11D1                            adc ecx, edx ;ecx:ebx = (e-x) + a * c
    71                                          
    72 00000061 6658                            pop ax ; ax = bx = (a-2) / (b+c)
    73 00000063 6699                            cwd; eax = (a-2) / (b+c)
    74 00000065 99                              cdq; edx:eax = (a-2) / (b+c)
    75                                          
    76 00000066 F8                              clc
    77 00000067 01D8                            add eax, ebx
    78 00000069 11CA                            adc edx, ecx ; edx:eax = (a-2) / (b+c) + (e-x) + a * c
    79                                          
    80                                          ; exit(0)
    81 0000006B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    82 0000006D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
