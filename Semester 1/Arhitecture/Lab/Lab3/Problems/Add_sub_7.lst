     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 01                          a db 1
    15 00000001 0200                        b dw 2
    16 00000003 03000000                    c dd 3
    17 00000007 0400000000000000            d dq 4
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22                                          
    23 00000000 A1[03000000]                    mov EAX, [c]
    24 00000005 BA00000000                      mov EDX, 0 ; EDX:EAX = c
    25                                          ;11223344  55667788h
    26                                          ; EDX       EAX
    27 0000000A F8                              clc;
    28 0000000B 2B05[07000000]                  sub EAX, dword [d+0]
    29 00000011 1B15[0B000000]                  sbb EDX, dword [d+4]; EDX:EAX = c - d
    30                                          
    31 00000017 F8                              clc; clear carry flag
    32 00000018 2B05[07000000]                  sub eax, dword [d+0]
    33 0000001E 1B15[0B000000]                  sbb edx, dword [d+4]
    34 00000024 F8                              clc; clear carry flag
    35 00000025 2B05[07000000]                  sub eax, dword [d+0]
    36 0000002B 1B15[0B000000]                  sbb edx, dword [d+4] ; EDX:EAX =  c - (d + d + d)
    37                                          
    38 00000031 BB00000000                      mov EBX, 0
    39 00000036 B900000000                      mov ECX, 0
    40 0000003B 8A1D[00000000]                  mov BL, [a]
    41 00000041 662B1D[01000000]                SUB BX, [b] ;bx = a-b
    42                                          
    43 00000048 F8                              clc
    44 00000049 01D8                            add EAX, EBX
    45 0000004B 11CA                            adc EDX, ECX; EDX: EAX = c - (d+d+d) + (a - b) 
    46                                          
    47                                          
    48                                          
    49                                          ; exit(0)
    50 0000004D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 0000004F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
