     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 313132363837353331-         a db '112687531513'
    14 00000009 353133             
    15                                      lena equ $-a
    16 0000000C 313233353534363839          b db '123554689'
    17                                      lenb  equ $-b
    18 00000015 00<rept>                    c times lena+lenb db 0
    19 0000002A 02                          two db 2
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; ...
    24 00000000 B909000000                      mov ecx, lenb; we suppose a is longer
    25 00000005 B00C                            mov al, lena
    26 00000007 3C09                            cmp al, lenb
    27 00000009 7705                            ja alonger
    28                                          
    29 0000000B B90C000000                      mov ecx, lena
    30                                          
    31                                          alonger:
    32                                          
    33 00000010 BE00000000                      mov esi, 0
    34 00000015 BF[15000000]                    mov edi, c
    35 0000001A E347                            jecxz final
    36                                          
    37                                          
    38                                          while:
    39 0000001C 8A86[00000000]                      mov al, [a+esi]
    40 00000022 3A86[0C000000]                      cmp al, [b+esi]
    41 00000028 7706                                ja abig
    42                                              
    43 0000002A 8A86[0C000000]                      mov al, [b+esi]
    44                                              
    45                                              abig:
    46 00000030 AA                                  stosb
    47 00000031 46                                  inc esi
    48 00000032 E2E8                            loop while
    49                                          
    50 00000034 B90C000000                      mov ecx, lena  ; we consider a is longer
    51 00000039 83E909                          sub ecx, lenb
    52 0000003C B00C                            mov al, lena
    53 0000003E 3C09                            cmp al, lenb
    54 00000040 7708                            ja alonger2
    55                                          
    56 00000042 B909000000                      mov ecx, lenb
    57 00000047 83E90C                          sub ecx, lena
    58                                          
    59                                          alonger2:
    60                                          
    61 0000004A E317                            jecxz final
    62 0000004C 66BB0100                        mov bx, 1
    63                                          for:
    64 00000050 6689D8                              mov ax, bx
    65 00000053 F635[2A000000]                      div byte [two]
    66                                  
    67 00000059 80C430                              add ah, 48 ;-> transforming into charahcter
    68 0000005C 8827                                mov [edi], ah
    69 0000005E 47                                  inc edi
    70 0000005F 6643                                inc bx
    71 00000061 E2ED                            loop for
    72                                          
    73                                          
    74                                          final:
    75                                          ; exit(0)
    76 00000063 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    77 00000065 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
