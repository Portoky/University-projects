     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf, digit_at_hundred             ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15 00000000 <res 00000004>              n resd 1
    16 00000004 <res 00000004>              number resd 1
    17 00000008 256400                      format db "%d", 0
    18 0000000B 00<rept>                    s2 times 100 db 0
    19 0000006F 1900                        k dw 25
    20                                      
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                  
    24                                      start:
    25                                          ; ...
    26 00000000 68[00000000]                    push dword n
    27 00000005 68[08000000]                    push dword format
    28 0000000A FF15[00000000]                  call [scanf]
    29 00000010 83C404                          add esp, 4
    30                                          
    31 00000013 BF[0B000000]                    mov edi, s2
    32                                          for:
    33 00000018 68[04000000]                        push dword number
    34 0000001D 68[08000000]                        push dword format
    35 00000022 FF15[00000000]                      call [scanf]
    36                                              
    37                                              ;determining the digit at 100s place
    38 00000028 FF35[04000000]                      push dword [number]
    39 0000002E 57                                  push dword edi
    40 0000002F E8(00000000)                        call digit_at_hundred
    41 00000034 83C408                              add esp, 4*2
    42                                              
    43 00000037 47                                  inc edi
    44 00000038 832D[00000000]01                    sub dword [n], 1 
    45                                              
    46 0000003F 833D[00000000]00                    cmp dword [n], 0
    47 00000046 75D0                                jne for
    48                                          
    49 00000048 68[0B000000]                    push dword s2
    50 0000004D FF15[00000000]                  call [printf]
    51 00000053 83C404                          add esp, 4
    52                                          
    53                                          ; exit(0)
    54 00000056 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 00000058 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
