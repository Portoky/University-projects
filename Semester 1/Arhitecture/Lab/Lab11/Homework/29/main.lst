     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf, gets              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll 
     9                                  import printf msvcrt.dll 
    10                                  import scanf msvcrt.dll 
    11                                  import gets msvcrt.dll 
    12                                     ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 00<rept>                    sentence times 100 db 0
    19 00000064 25732000                    format db "%s ", 0
    20 00000068 00<rept>                    aword times 30 db 0
    21 00000086 00<rept>                    reversedword times 30 db 0
    22                                      
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      reverse:
    26 00000000 8B7C2404                        mov edi, [esp+4] ;where will bereversed
    27 00000004 8B742408                        mov esi, [esp+8] ; to reverse
    28 00000008 49                              dec ecx
    29 00000009 01CF                            add edi, ecx
    30                                         .while:
    31 0000000B FC                                  cld
    32 0000000C AC                                  lodsb
    33 0000000D FD                                  std
    34 0000000E AA                                  stosb
    35 0000000F 803E00                          cmp byte [esi], 0
    36 00000012 75F7                            jne .while
    37                                          
    38 00000014 FC                              cld 
    39 00000015 C3                              ret
    40                                  
    41                                      start:
    42                                          ; ...
    43                                          
    44 00000016 68[00000000]                        push dword sentence
    45                                              ;push dword format
    46 0000001B FF15[00000000]                      call [gets]
    47 00000021 83C404                              add esp, 4
    48                                              
    49 00000024 BE[00000000]                        mov esi, sentence
    50                                              for:
    51                                              
    52 00000029 BF[68000000]                            mov edi, aword
    53 0000002E B900000000                              mov ecx, 0
    54                                                  while:
    55 00000033 41                                          inc ecx
    56 00000034 A4                                          movsb
    57 00000035 803E20                                      cmp byte [esi], " "
    58 00000038 7407                                        je endwhile
    59 0000003A 803E2E                                      cmp byte [esi], "."
    60 0000003D 7402                                        je endwhile
    61 0000003F EBF2                                        jmp while
    62                                                  endwhile:
    63                                                  
    64 00000041 56                                      push esi
    65 00000042 68[68000000]                            push dword aword
    66 00000047 68[86000000]                            push dword reversedword
    67 0000004C E8AFFFFFFF                              call reverse
    68 00000051 83C408                                  add esp, 4*2
    69                                                  
    70                                                  
    71 00000054 68[86000000]                            push dword reversedword
    72 00000059 68[64000000]                            push dword format
    73 0000005E FF15[00000000]                          call [printf]
    74 00000064 83C408                                  add esp, 4*2
    75                                                  
    76 00000067 5E                                      pop esi
    77 00000068 B91E000000                              mov ecx, 30
    78 0000006D BF[68000000]                            mov edi, aword
    79 00000072 B000                                    mov al, 0 
    80 00000074 F3AA                                    rep stosb
    81                                                  
    82 00000076 B91E000000                              mov ecx, 30
    83 0000007B BF[86000000]                            mov edi, reversedword
    84 00000080 B000                                    mov al, 0 
    85 00000082 F3AA                                    rep stosb
    86                                                      
    87 00000084 803E2E                              cmp byte [esi], "."
    88 00000087 75A0                                jne for
    89                                          
    90                                          ; exit(0)
    91 00000089 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    92 0000008B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
