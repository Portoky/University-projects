     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fprintf, fread, printf           ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll 
    10                                  import fclose msvcrt.dll                    ; msvcrt.dll contains exit, printf and all the other important 
    11                                  import fprintf msvcrt.dll
    12                                  import fread msvcrt.dll
    13                                  import printf msvcrt.dll
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 66696C652E74787400          file db "file.txt", 0
    19 00000009 612B00                      access db "a+", 0
    20 0000000C 4D7920666972737420-         message db "My first message with the number: %d.", 0
    20 00000015 6D6573736167652077-
    20 0000001E 69746820746865206E-
    20 00000027 756D6265723A202564-
    20 00000030 2E00               
    21 00000032 416E6F74686572206D-         message2 db "Another message added.", 0
    21 0000003B 657373616765206164-
    21 00000044 6465642E00         
    22 00000049 05000000                    number dd 5
    23 0000004D FFFFFFFF                    file_descriptor dd -1
    24 00000051 00<rept>                    read_message TIMES 100 db 0
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; ...
    29                                          ;opening
    30 00000000 68[09000000]                    push dword access
    31 00000005 68[00000000]                    push dword file
    32 0000000A FF15[00000000]                  call [fopen] ;eax = file_descriptor
    33 00000010 83C408                          add esp, 4*2 
    34                                          
    35 00000013 83F800                          cmp eax, 0
    36 00000016 743A                            je final
    37 00000018 A3[4D000000]                    mov [file_descriptor], eax
    38                                          
    39                                          
    40                                          
    41                                          ;reading
    42 0000001D FF35[4D000000]                  push dword [file_descriptor]
    43 00000023 6A64                            push dword 100
    44 00000025 6A01                            push dword 1
    45 00000027 68[51000000]                    push dword read_message
    46 0000002C FF15[00000000]                  call [fread]
    47 00000032 83C410                          add esp, 4*4
    48                                          
    49                                          ;closing
    50 00000035 FF35[4D000000]                  push dword [file_descriptor]
    51 0000003B FF15[00000000]                  call [fclose]
    52 00000041 83C404                          add esp, 4
    53                                          
    54 00000044 68[51000000]                    push read_message
    55 00000049 FF15[00000000]                  call [printf]
    56 0000004F 83C404                          add esp, 4
    57                                          
    58                                          
    59                                          ; exit(0)
    60                                          final:
    61 00000052 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    62 00000054 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
