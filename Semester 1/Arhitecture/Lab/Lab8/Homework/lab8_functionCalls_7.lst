     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf             ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import printf msvcrt.dll  ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15 00000000 11000000                    a dd 17
    16 00000004 06000000                    b dd 6
    17 00000008 00000000                    r dd 0
    18 0000000C 2564206D6F64202564-         message db "%d mod %d = %d", 0
    18 00000015 203D20256400       
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 A1[00000000]                    mov eax, [a]
    24 00000005 8B1D[04000000]                  mov ebx, [b]
    25 0000000B 99                              cdq ; eax - > edx:eax = [a]
    26 0000000C F73D[04000000]                  idiv dword [b] ; eax = quotient, edx = remainder
    27 00000012 8915[08000000]                  mov [r], edx
    28 00000018 FF35[08000000]                  push dword [r]
    29 0000001E FF35[04000000]                  push dword [b]
    30 00000024 FF35[00000000]                  push dword [a]
    31 0000002A 68[0C000000]                    push dword message
    32 0000002F FF15[00000000]                  call [printf]
    33 00000035 83C40C                          add esp, 4 * 3
    34                                          ; exit(0)
    35 00000038 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    36 0000003A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
