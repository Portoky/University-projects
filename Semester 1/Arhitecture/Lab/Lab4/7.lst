     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 5777                        a dw 0111011101010111b
    15 00000002 BE9B                        b dw 1001101110111110b
    16 00000004 00000000                    c dd 0
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                          ; ...
    21 00000000 BB00000000                      mov ebx, 0 ;compute the result in ebx
    22 00000005 83CB0F                          or ebx, 0000000000001111b ;ebx = 0000000000001111b
    23                                          
    24 00000008 B800000000                      mov eax, 0
    25 0000000D 66B83F00                        mov ax, 0000000000111111b
    26 00000011 662305[00000000]                and ax, [a]; bits 0-6 saved bitmasking!
    27 00000018 B105                            mov cl, 5
    28 0000001A 66D3C0                          rol ax, cl; bits 0-6-> 5-11; we could have used shr as well
    29 0000001D 09C3                            or ebx, eax; the bits 0-4 of C have the value 1
    30                                                      ;the bits 5-11 of C are the same as the bits 0-6 of A
    31                                          
    32 0000001F B800000000                      mov eax, 0
    33 00000024 B865000000                      mov eax, 0000000001100101b
    34 00000029 B110                            mov cl, 16
    35 0000002B D3C0                            rol eax, cl; once again shr would be good too
    36                                                     ; now bits 15-31 on eax are 00....101b
    37 0000002D 09C3                            or ebx, eax; now bits 15-31 on ebx are 00....101b
    38                                          
    39 0000002F B800000000                      mov eax, 0 ;bits set to 0
    40 00000034 66B8000F                        mov ax, 00000111100000000b
    41 00000038 662305[02000000]                and ax, [b] ;bits 8-11 of B saved
    42 0000003F 66C1E004                        shl ax, 4
    43 00000043 09C3                            or ebx, eax ;the bits 12-15 of C are the same as the bits 8-11 of B
    44                                          
    45 00000045 891D[04000000]                  mov [c], ebx ;we put the result in the c variable
    46                                          
    47                                          
    48                                          
    49                                          ; exit(0)
    50 0000004B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 0000004D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
