     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    
     9                                  import scanf msvcrt.dll  
    10                                    
    11                                  ;the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 00000000                    n dd 0
    18                                      len_max equ 65535
    19 00000004 00000000                    number dd 0
    20 00000008 00<rept>                    sum_digits times len_max db 0
    21 00010007 256400                      format db "%d", 0
    22 0001000A 0A00                        ten dw 10
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 68[00000000]                    push dword n
    28 00000005 68[07000100]                    push dword format 
    29 0000000A FF15[00000000]                  call [scanf]
    30 00000010 83C408                          add esp, 4*2
    31                                          
    32 00000013 8B0D[00000000]                  mov ecx, [n]
    33 00000019 BF[08000000]                    mov edi, sum_digits
    34                                          for:
    35 0000001E 51                                  push ecx; saving volatile registers
    36 0000001F 68[04000000]                        push dword number
    37 00000024 68[07000100]                        push dword format
    38 00000029 FF15[00000000]                      call [scanf]
    39 0000002F 83C408                              add esp, 4*2
    40 00000032 59                                  pop ecx
    41 00000033 B300                                mov bl, 0; sum of digits
    42                                              while:
    43 00000035 66A1[04000000]                          mov ax, [number]
    44 0000003B 668B15[06000000]                        mov dx, [number+2]
    45 00000042 66F735[0A000100]                        div word [ten]; in dx we have the digit, basically in dl, since its small
    46                                                  
    47 00000049 6650                                    push ax
    48 0000004B B800000000                              mov eax, 0
    49 00000050 6658                                    pop ax
    50 00000052 A3[04000000]                            mov [number], eax; updateing the number after division with 10
    51                                                  
    52 00000057 F6C201                                  test dl, 01h ;testng if the digit is even or add
    53 0000005A 7502                                    jnz skip
    54 0000005C FEC3                                    inc bl
    55                                                  skip:
    56                                                  
    57 0000005E 833D[04000000]00                        cmp dword [number], 0
    58 00000065 75CE                                    jne while
    59                                                  
    60 00000067 88D8                                    mov al, bl
    61 00000069 AA                                      stosb
    62 0000006A B000                                    mov al, 0
    63 0000006C E2B0                            loop for
    64                                          ; exit(0)
    65 0000006E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    66 00000070 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
