     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 4523A50068039039            s1 dw 2345h, 0a5h, 368h, 3990h
    15                                      lens1 equ ($-s1) / 2
    16 00000008 040055261000                s2 dw 4h, 2655h, 10h
    17                                      lens2 equ ($-s2) / 2
    18 0000000E 0000<rept>                  res times (lens1 + lens2) dw 0
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 BE[00000000]                    mov esi, s1
    24 00000005 BF[0E000000]                    mov edi, res
    25 0000000A B904000000                      mov ecx, lens1
    26 0000000F E343                            jecxz final
    27                                          
    28                                          while1:
    29 00000011 A4                                  movsb
    30 00000012 46                                  inc esi
    31 00000013 E2FC                            loop while1
    32                                          
    33 00000015 BE[09000000]                    mov esi, s2+1
    34 0000001A B903000000                      mov ecx,lens2
    35 0000001F E333                            jecxz final
    36                                          while2:
    37 00000021 A4                                  movsb
    38 00000022 46                                  inc esi
    39 00000023 E2FC                            loop while2
    40                                          
    41                                          ;sorting
    42                                          
    43 00000025 B907000000                      mov ecx, lens1 + lens2
    44 0000002A E328                            jecxz final
    45                                          
    46                                          while3:
    47 0000002C B300                                mov bl, 0
    48 0000002E BE[0E000000]                        mov esi, res
    49 00000033 BF[0F000000]                        mov edi, res+1
    50 00000038 B906000000                          mov ecx, lens1+lens2-1
    51 0000003D E315                                jecxz final
    52                                              for:
    53 0000003F 8A06                                    mov al, [esi]
    54 00000041 3A07                                    cmp al, [edi]
    55 00000043 7E06                                    jle skip
    56 00000045 8607                                    xchg al, [edi]
    57 00000047 8806                                    mov [esi], al
    58 00000049 FEC3                                    inc bl
    59                                                  skip:
    60 0000004B 46                                      inc esi
    61 0000004C 47                                      inc edi
    62 0000004D E2F0                                loop for
    63 0000004F 80FB00                              cmp bl, 0
    64 00000052 75D8                                jne while3
    65                                              
    66                                          final:
    67                                          ; exit(0)
    68 00000054 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    69 00000056 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
